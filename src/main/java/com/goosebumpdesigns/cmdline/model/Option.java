// Copyright (c) 2021 Goosebump Designs
package com.goosebumpdesigns.cmdline.model;

import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import com.goosebumpdesigns.cmdline.CmdLine;
import com.goosebumpdesigns.cmdline.HelpFormatter;
import com.goosebumpdesigns.cmdline.exception.CmdLineException;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;

/**
 * This class maintains information on a command-line option. It has a builder and is immutable.
 * <p>
 * Command-line options have long names (--option) and short names (-o). They may be followed by an
 * option value (--name Rob). A single parameter value can be returned by calling a variant of
 * {@link CmdLine#getValue(String)}.
 * <p>
 * You can specify that a parameter is required. This means that if there is a following value it
 * must be present. It doesn't make much sense to require a parameter with no following value but
 * there's nothing preventing you from doing that.
 * <p>
 * You can specify that options can be multiple, which means that you can have more than one (--name
 * Rob --name Bill). These values can be retrieved by calling a variant of
 * {@link CmdLine#getValues(String)}.
 * <p>
 * Options can have a help line. This is neatly formatted by the {@link HelpFormatter} class.
 * <p>
 * Note that short option names may be grouped together. So "-a -b -c" is the same as "-abc". Only
 * the final option in the group may take a following value.
 * 
 * @author Rob
 *
 */
@Getter
@EqualsAndHashCode
@ToString
public class Option {
  private String name;
  private Character shortName;
  private boolean followedByValue;
  private boolean required;
  private boolean multiple;
  private String help;
  private List<String> validValues;
  private List<String> values = new LinkedList<>();

  /**
   * This is the constructor used by the builder. It is annotated with @Builder because this will
   * cause Lombok to ignore the values attribute.
   * 
   * @param name The Option long name.
   * @param shortName The Option short name. If not specified, a short name is generated by taking
   *        the first character of the long name and converting it to lower case. You need to be
   *        careful with the automated approach because it is entirely possible to generate a
   *        duplicate short name, which will cause an exception to be thrown.
   * @param followedByValue If {@code true}, a value must follow the option (i.e., --name Rob).
   * @param required Set this to {@code true} if the option is required.
   * @param multiple Set this to {@code true} if multiple options with the same name are allowed
   *        (i.e., --name Rob --name Bill).
   * @param help This is the help that is neatly formatted by the {@link CmdLineHelp}.
   */
  @Builder
  public Option(@NonNull String name, Character shortName, boolean followedByValue,
      boolean required, boolean multiple, String help, List<String> validValues) {
    this.name = name;
    this.shortName = shortName;
    this.followedByValue = followedByValue;
    this.required = required;
    this.multiple = multiple;
    this.help = help;
    this.validValues = validValues;

    if(Objects.isNull(this.shortName)) {
      this.shortName = Character.toLowerCase(name.charAt(0));
    }
  }

  /**
   * Add a value to the option. If the option has the <em>multiple</em> attribute, more than one
   * value may be added. This method is package scope to limit access to the package.
   * 
   * @param value The value to add.
   * @return The Option.
   * @throws If more than one value is added when multiple options are not allowed.
   */
  public Option addValue(String value) {
    if(Objects.nonNull(validValues) && !validValues.contains(value)) {
      throw new CmdLineException(
          "Expected one of " + validValues + " for --" + name + " but found '" + value + "'");
    }

    this.values.add(value);

    if(!multiple && values.size() > 1) {
      throw new CmdLineException(
          "Found multiple values for --" + name + " but option does not accept multiple values");
    }

    return this;
  }
}
